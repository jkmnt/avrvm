#ifndef __AVR_OP_DECODER_H__
#define __AVR_OP_DECODER_H__
/* Autogenerated file, do not edit */

//-- instructions enum
typedef enum
{
    AVR_OP_UNDEFINED,
    AVR_OP_BCLR,
    AVR_OP_BSET,
    AVR_OP_ICALL,
    AVR_OP_IJMP,
    AVR_OP_LPM_R0,
    AVR_OP_LPM,
    AVR_OP_LPM_INC,
    AVR_OP_NOP,
    AVR_OP_WDR,
    AVR_OP_RET,
    AVR_OP_ADC,
    AVR_OP_ADD,
    AVR_OP_AND,
    AVR_OP_CP,
    AVR_OP_CPC,
    AVR_OP_CPSE,
    AVR_OP_EOR,
    AVR_OP_MOV,
    AVR_OP_MUL,
    AVR_OP_OR,
    AVR_OP_SBC,
    AVR_OP_SUB,
    AVR_OP_ANDI,
    AVR_OP_LDI,
    AVR_OP_ORI,
    AVR_OP_CPI,
    AVR_OP_SBCI,
    AVR_OP_SUBI,
    AVR_OP_SBRC,
    AVR_OP_SBRS,
    AVR_OP_BLD,
    AVR_OP_BST,
    AVR_OP_IN,
    AVR_OP_OUT,
    AVR_OP_ADIW,
    AVR_OP_SBIW,
    AVR_OP_CBI,
    AVR_OP_SBI,
    AVR_OP_SBIC,
    AVR_OP_SBIS,
    AVR_OP_BRBC,
    AVR_OP_BRBS,
    AVR_OP_RCALL,
    AVR_OP_RJMP,
    AVR_OP_CALL,
    AVR_OP_JMP,
    AVR_OP_ASR,
    AVR_OP_COM,
    AVR_OP_DEC,
    AVR_OP_INC,
    AVR_OP_LSR,
    AVR_OP_NEG,
    AVR_OP_POP,
    AVR_OP_PUSH,
    AVR_OP_ROR,
    AVR_OP_SWAP,
    AVR_OP_MOVW,
    AVR_OP_STS,
    AVR_OP_LDS,
    AVR_OP_LD_X,
    AVR_OP_LD_X_INC,
    AVR_OP_LD_X_DEC,
    AVR_OP_LD_Y_INC,
    AVR_OP_LD_Y_DEC,
    AVR_OP_LDD_Y,
    AVR_OP_LD_Z_INC,
    AVR_OP_LD_Z_DEC,
    AVR_OP_LDD_Z,
    AVR_OP_ST_X,
    AVR_OP_ST_X_INC,
    AVR_OP_ST_X_DEC,
    AVR_OP_ST_Y_INC,
    AVR_OP_ST_Y_DEC,
    AVR_OP_STD_Y,
    AVR_OP_ST_Z_INC,
    AVR_OP_ST_Z_DEC,
    AVR_OP_STD_Z,
    AVR_OP_MULS,
    AVR_OP_MULSU,
    AVR_OP_FMUL,
    AVR_OP_FMULS,
    AVR_OP_FMULSU,
    AVR_OP_SLEEP,
    AVR_OP_BREAK,
} avr_instr_t;

//-- operands
typedef struct
{
    int16_t pc_offset;
    uint8_t rd;
    uint8_t rr;
    uint8_t port;
    uint8_t ptr_displacement;
    uint8_t addr_msbyte;
    union {
        uint8_t imm;
        uint8_t bit;
    };
} avr_operands_t;

avr_instr_t avr_decode(avr_operands_t *result, uint16_t op);

const char *avr_get_instr_name_by_id(avr_instr_t id);

#endif